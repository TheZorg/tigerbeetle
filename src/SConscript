import os


Import('root_env')

env = root_env.Clone()

env.Append(CPPPATH=['#/src'])

lib_env = env.Clone();

analysis = SConscript(os.path.join('analysis', 'SConscript'), exports=['lib_env'])
analysis_blocks = SConscript(os.path.join('analysis_blocks', 'SConscript'), exports=['lib_env'])
base = SConscript(os.path.join('base', 'SConscript'), exports=['lib_env'])
block = SConscript(os.path.join('block', 'SConscript'), exports=['lib_env'])
mq = SConscript(os.path.join('mq', 'SConscript'), exports=['lib_env'])
notification = SConscript(os.path.join('notification', 'SConscript'), exports=['lib_env'])
rpc = SConscript(os.path.join('rpc', 'SConscript'), exports=['lib_env'])
state = SConscript(os.path.join('state', 'SConscript'), exports=['lib_env'])
state_blocks = SConscript(os.path.join('state_blocks', 'SConscript'), exports=['lib_env'])
trace = SConscript(os.path.join('trace', 'SConscript'), exports=['lib_env'])
trace_blocks = SConscript(os.path.join('trace_blocks', 'SConscript'), exports=['lib_env'])
value = SConscript(os.path.join('value', 'SConscript'), exports=['lib_env'])

subs = [
    ('analysis', analysis),
    ('analysis_blocks', analysis_blocks),
    ('base', base),
    ('block', block),
    ('mq', mq),
    ('notification', notification),
    ('rpc', rpc),
    ('state', state),
    ('state_blocks', state_blocks),
    ('trace', trace),
    ('trace_blocks', trace_blocks),
    ('value', value),    
]

sources = []
for directory, files in subs:
    sources += [os.path.join(directory, f) for f in files]

lib = lib_env.SharedLibrary(target='tigerbeetle', source=sources)

test = SConscript(os.path.join('test', 'SConscript'),
                  exports=['lib_env', 'lib'])

Depends('test', 'lib')

Return(['test', 'lib'])
