import os

Import('lib_env', 'lib')

target = 'unittests'

app_env = lib_env.Clone()

sources_unittests = [
    'block/BlockRunner_Unittest.cpp',
    'critical/CriticalGraph_Unittest.cpp',
    'critical/CriticalPath_Unittest.cpp',
    'execution/CanonizeSequence_Unittest.cpp',
    'execution/DynamicMatching_Unittest.cpp',
    'execution/Graph_Unittest.cpp',
    'execution/ExecutionBuilder_Unittest.cpp',
    'execution/FindRepetitions_Unittest.cpp',
    'execution/HierarchyMatcher_Unittest.cpp',
    'execution/Node_Unittest.cpp',
    'execution/PreorderIterator_Unittest.cpp',
    'keyed_tree/KeyedTree_Unittest.cpp',
    'notification/NotificationCenter_Unittest.cpp',
    'state/CurrentState_Unittest.cpp',
    'state_blocks/LinuxSchedStateBlock_Unittest.cpp',
    'trace/TraceSet_Unittest.cpp',
    'trace/TraceSetIterator_Unittest.cpp',
    'trace_blocks/TraceBlock_Unittest.cpp',
    'value/MakeValue_Unittest.cpp',
    'value/Utils_Unittest.cpp',
    'value/Value_Unittest.cpp',
]

sources_contrib = [
    'gmock/gtest/src/gtest-all.cc',
    'gmock/src/gmock-all.cc',
    'gmock/src/gmock_main.cc',
]

subs = [
    ('..', sources_unittests),
    ('../../contrib', sources_contrib),
]

sources = []
for directory, files in subs:
    sources += [os.path.join(directory, f) for f in files]

app_env.ParseConfig('pkg-config --cflags glib-2.0')

libs = [
    lib,
    'pthread',
]

app_env.Prepend(LIBS=libs)
app_env.Append(LIBS=['pthread'])
app_env.Append(CPPFLAGS=['-pthread'])
app_env.Append(CPPPATH=['#/contrib/gmock/include',
                        '#/contrib/gmock',
                        '#/contrib/gmock/gtest/include',
                        '#/contrib/gmock/gtest'])

app = app_env.Program(target=target, source=sources)

Return(['app'])
